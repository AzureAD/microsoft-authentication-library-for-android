apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply from: 'versioning/version_tasks.gradle'
group = 'com.microsoft.identity.client'
apply plugin: 'jacoco'

// To include Robolectric tests in the Jacoco report, flag -> "includeNolocationClasses" is set to true
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//Constants:- used to generate Coverage report task
def unitTestType = "UnitTest"
def androidTestType = "AndroidTest"
def bothTestType = "BothTest"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getAppVersionCode()
        versionName getAppVersionName()
        project.archivesBaseName = "msal"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        // testCoverageEnabled flag is set to true to get coverage reports for Android Tests
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            testCoverageEnabled true
            minifyEnabled false
            debuggable false
            consumerProguardFiles 'consumer-rules.pro'
        }
    }

    publishNonDefault true

    lintOptions {
        abortOnError true
        disable 'OldTargetApi'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "main"

    productFlavors {
        // The 'local' productFlavor sources common from mavenLocal and is intended to be used
        // during development.
        local {
            dimension "main"
            versionNameSuffix "-local"
        }

        snapshot {
            dimension "main"
        }

        // The 'dist' productFlavor sources common from a central repository and is intended
        // to be used for releases.
        dist {
            dimension "main"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            def fileName = "${archivesBaseName}-${version}.aar"
            outputFileName = fileName
        }

        // create separate code coverage tasks(for unitTests, androidTests and both Tests) for every build variant
        def buildVariant = variant.name
        createCoverageTask(buildVariant, unitTestType)
        createCoverageTask(buildVariant, androidTestType)
        createCoverageTask(buildVariant, bothTestType)
    }

    testOptions {
        unitTests.all {
            if (!project.hasProperty('labtest')) {
                // Disabling network based e2e tests if labtest not specified in build
                // to turn on pass labtest as build param
                // example: ./gradlew testLocalDebugUnitTest -Plabtest
                exclude 'com/microsoft/identity/client/e2e/tests/network'
            }

        }
    }
}

ext.createCoverageTask = { buildVariant, testType ->
    // Code coverage task depends on additional task to run all unit tests and android tests
    def unitTestTask = "test${buildVariant.capitalize()}UnitTest"
    def androidTestTask = "connected${buildVariant.capitalize()}AndroidTest"

    // Output of those additional tasks are stored in .exec file for unit tests and .ec file for android tests
    def unitTestFile = "jacoco/${unitTestTask}.exec"
    def androidTestFile = "outputs/code_coverage/${buildVariant}AndroidTest/connected/*.ec"

    // Include Task and corresponding output file of tests, according to testType
    def taskList, executionFiles
    if (testType.matches(bothTestType)) {
        taskList = [unitTestTask, androidTestTask]
        executionFiles = [unitTestFile, androidTestFile]
    } else if (testType.matches(unitTestType)){
        taskList = [unitTestTask]
        executionFiles = [unitTestFile]
    } else {
        taskList = [androidTestTask]
        executionFiles = [androidTestFile]
    }

    // Task to generate coverage report for particular build variant, that depends on additional tasks depending on testType
    task "${buildVariant}Msal${testType}CoverageReport" (type:JacocoReport, dependsOn: taskList) {
        group = "Code Coverage"
        description = "Generate Msal Coverage Reports(${testType}) on the ${buildVariant.capitalize()}"

        def commonBuild = buildVariant.matches("(.*)Debug(.*)") ? "debug" : "release"
        def commonFilePath = buildDir.absolutePath.matches("(.*)android_auth(.*)") ? "common" : "../common/common/build";
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test.*']

        // Include source files(of msal) in which code coverage needs to be found, after filtering out some set of files
        def coverageSourceDirs = "${projectDir}/src/main/java";
        def javaClasses = fileTree(
                dir: "${buildDir}/intermediates/javac/${buildVariant}/classes",
                excludes: fileFilter
        )

        // Include additional source files(as msal depends on common) in code coverage report
        def additionalCoverageSourceDirs = "${projectDir}/../common/common/src/main/java"
        def additionalJavaClasses = fileTree(
                dir: "${buildDir}/../${commonFilePath}/intermediates/javac/${commonBuild}/classes",
                excludes: fileFilter
        )

        //Include all those directories for source files and additional source files defined above
        sourceDirectories.from = files([coverageSourceDirs])
        additionalSourceDirs.from = files(additionalCoverageSourceDirs)
        additionalClassDirs.from = files([additionalJavaClasses])
        classDirectories.from = files([javaClasses])

        //Code coverage report is generated based on the the output files of additional tasks(unitTestTask, androidTestTask or both)
        executionData.from = fileTree(dir: "$buildDir", includes: executionFiles)

        // html reports are auto-generated without enabling flag, so enabling xml flag
        reports {
            xml.enabled = true
        }
    }
}

// Task to generate javadoc
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')

    exclude '**/BuildConfig.Java'
    exclude '**/R.java'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

// Task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

dependencies {
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appCompatVersion"
    implementation "androidx.browser:browser:$rootProject.ext.browserVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation ("com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusVersion") {
        exclude module: 'asm'
    }
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"

    // test dependencies
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    // TODO the below dependency should be mockito-core but the MockMaker isn't working...
    testImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoAndroidVersion"
    testImplementation ("org.robolectric:robolectric:$rootProject.ext.robolectricVersion")
    testImplementation "androidx.test:core:$rootProject.ext.androidxTestCoreVersion"
    testImplementation project(':testutils')
    // instrumentation test dependencies
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidxJunitVersion"
    // Set this dependency to use JUnit 4 rules
    androidTestImplementation "androidx.test:rules:$rootProject.rulesVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoAndroidVersion"
    // 'local' flavor dependencies
    localApi(project(":common")) {
        transitive = false
    }

    snapshotApi(group: 'com.microsoft.identity', name: 'common', version: '3.0.6', changing: true)

    distApi("com.microsoft.identity:common:3.0.6") {
        transitive = false
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

afterEvaluate {
   // Gradle 6.1.1 and Android Gradle Plugin 4.0.1 doesn't rename the file (see 'outputFileName' above)
   // Adding this work around to have the file properly renamed.
   tasks.named("assembleDistRelease").configure {
       def buildFile = file("$buildDir/outputs/aar/${archivesBaseName}-dist-release.aar")
       print "Build file $buildFile"
       doLast {
           println "Renaming build file $buildFile to '$buildDir${File.separator}outputs${File.separator}aar${File.separator}${archivesBaseName}-${version}.aar'"
           if (!buildFile.renameTo("$buildDir${File.separator}outputs${File.separator}aar${File.separator}${archivesBaseName}-${version}.aar")) {
               println "Rename failed!"
           }
       }
   }
}

publishing {
    publications {
        msal(MavenPublication) {
            groupId 'com.microsoft.identity.client'
            artifactId 'msal'
            //Edit the 'version' here for VSTS RC build
            version = project.version

            pom.withXml {
                // Custom values

                // Name
                asNode().appendNode('name', 'msal')

                // Description
                asNode().appendNode(
                    'description',
                    'Microsoft Identity library for Android gives you the ability to add authentication to your application with just a few lines of additional code. Using our MSAL SDKs you can quickly and easily extend your existing application to all the employees that use MSA, B2C, Azure AD and Active Directory on-premises using Active Directory Federation Services, including Office365 customers.'
                )

                // URL
                asNode().appendNode('url', 'https://github.com/AzureAD/microsoft-authentication-library-for-android')

                // Inception Year
                asNode().appendNode('inceptionYear', '2016')

                // Licenses
                asNode().appendNode('licenses').appendNode('license').appendNode('name', 'MIT License')

                // Developers
                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'microsoft')
                developerNode.appendNode('name', 'Microsoft')

                // SCM
                asNode().appendNode('scm').appendNode('url', 'https://github.com/AzureAD/microsoft-authentication-library-for-android/tree/master')

                // Properties
                def propertiesNode = asNode().appendNode('properties')
                propertiesNode.appendNode('branch', 'master')
                propertiesNode.appendNode('version', project.version)

                def dependenciesNode = asNode().appendNode('dependencies')


                def deps = configurations.implementation.allDependencies.asList()
                if (project.version.toString().endsWith("SNAPSHOT")) {
                    deps.addAll(configurations.snapshotApi.allDependencies.asList())
                } else {
                    deps.addAll(configurations.distApi.allDependencies.asList())
                }

                //Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                deps.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

            }

            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/msal-${project.version}.aar")
        }

    }

    // Repositories to which Gradle can publish artifacts
    repositories {
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_USERNAME") : project.findProperty("vstsUsername")
                password System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('assemble')) {
        task.dependsOn 'pmd'
    }

    if (task.name.contains('assemble')
        && !task.name.contains('Snapshot')
        && !task.name.contains('Test')
        && !task.name.contains('Local')) {
        task.dependsOn 'lint', 'javadocJar', 'sourcesJar'
    }
}
