# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'android:serverUrl' was defined in the Variables tab
# Variable 'ENV_VSTS_MVN_ANDROID_MSAL_USERNAME' was defined in the Variables tab
# Variable 'gcloud_project_id' was defined in the Variables tab
# Variable 'msal_version' was defined in the Variables tab
# Variable 'mvnAccessToken' was defined in the Variables tab
# Variable 'test_repo_branch' was defined in the Variables tab
# Variable 'test_repo_dir' was defined in the Variables tab
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: dev
  - repository: common
    type: github
    name: AzureAD/microsoft-authentication-library-common-for-android
    ref: refs/heads/pedroro/IDDP-pipelines
    endpoint: ANDROID_GITHUB
jobs:
- job: Phase_1
  displayName: Phase 1
  cancelTimeoutInMinutes: 1
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - checkout: self
    clean: true
    submodules: recursive
    persistCredentials: True
  - template: azure-pipelines/templates/steps/credscan-policheck.yml@common
    parameters:
      policheckCmdLineArgsDir: adal
  - task: DownloadPipelineArtifact@2
    displayName: Download Azure Sample
    inputs:
      buildType: specific
      project: a7934fdd-dcde-4492-a406-7fad6ac00e17
      definition: 1278
      specificBuildWithTriggering: true
      artifactName: AzureSampleExternalRelease
  - template: azure-pipelines/templates/steps/ui-automation/gcloud.yml@common
  #arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROID_MSAL_ACCESSTOKEN]$(mvnAccessToken)'
  - task: PowerShell@2
    displayName: Generate Assemble Task Name for MSAL automation app
    inputs:
      targetType: inline
      script: >-
        $assembleTask = "assembleDistAutoBrokerDebug"


        if (("$(msal_version)" -ne "")) {
            $assembleTask = $assembleTask + " -PdistMsalVersion=" + "$(msal_version)"
        }


        Write-Host "##vso[task.setvariable variable=AssembleTask;]$assembleTask"
  - task: Gradle@1
    name: Gradle1
    displayName: Assemble MSAL Automation App
    inputs:
      tasks: clean msalautomationapp:$(assembleTask) -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PpreferPreInstalledApks -PbrokerSource=PlayStore
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
  - task: Gradle@1
    displayName: Assemble MSAL Automation App Instrumented Tests
    inputs:
      tasks: msalautomationapp:assembleDistAutoBrokerDebugAndroidTest
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
  - task: PowerShell@2
    displayName: Run UI Automation on Firebase
    inputs:
      targetType: inline
      script: >-
        $baseApkPath = "$(Build.SourcesDirectory)\msalautomationapp\build\outputs\apk"

        $appApk = "$baseApkPath\distAutoBroker\debug\msalautomationapp-dist-AutoBroker-debug.apk"

        $testApk = "$baseApkPath\androidTest\distAutoBroker\debug\msalautomationapp-dist-AutoBroker-debug-androidTest.apk"

        $azureSampleApk = "$(System.ArtifactsDirectory)\AzureSampleExternalRelease\app-external-release.apk"

        $appApk

        $testApk

        $azureSampleApk

        gcloud firebase test android run --type instrumentation --app $appApk --test $testApk --device model=flame,version=29 --timeout 45m --additional-apks $azureSampleApk --results-dir msal-release-$(Build.BuildId)-$(Build.BuildNumber) --directories-to-pull "/sdcard" --use-orchestrator  --environment-variables clearPackageData=true --results-history-name "MSAL Dist w/ PROD Brokers"
  - task: PowerShell@2
    displayName: Download Test Result File
    condition: succeededOrFailed()
    inputs:
      targetType: inline
      script: gsutil cp gs://test-lab-ffz6x9pu2y62a-is0rq7a7rwdhi/msal-release-$(Build.BuildId)-$(Build.BuildNumber)/flame-29-en-portrait/test_result_1.xml $(Build.SourcesDirectory)
  - task: PublishTestResults@2
    displayName: Publish Test Results to ADO
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '*test_result*.xml'
      searchFolder: $(Build.SourcesDirectory)
      testRunTitle: 'MSAL UI Automation - Build # $(Build.BuildNumber)'
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection
...
