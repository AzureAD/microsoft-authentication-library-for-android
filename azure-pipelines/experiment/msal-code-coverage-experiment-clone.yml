# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'android:serverUrl' was defined in the Variables tab
# Variable 'ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME' was defined in the Variables tab
# Variable 'mvnAccessToken' was defined in the Variables tab
# Variable 'test_repo_branch' was defined in the Variables tab
# Variable 'test_repo_dir' was defined in the Variables tab
# Variable 'testEmailAccount' was defined in the Variables tab
# Variable 'testEmailAccountPassword' was defined in the Variables tab
# Variable 'toEmailAccount' was defined in the Variables tab
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: aymeghwa-CodeCoverage
jobs:
- job: Phase_1
  displayName: Phase 1
  cancelTimeoutInMinutes: 1
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - checkout: self
    clean: true
    submodules: recursive
    persistCredentials: True
  - template: ../templates/steps/credscan-policheck.yml
    parameters:
      policheck-cmdlineargs-dir: adal
  - task: CmdLine@1
    displayName: Set MVN Access Token in Environment
    inputs:
      filename: echo
      arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN]$(mvnAccessToken)'
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: Download Cert for Automation'
    inputs:
      ConnectedServiceName: 52f0b8f0-fbe7-4c1b-8169-25886eb6bab4
      KeyVaultName: ADALTestInfo
      SecretsFilter: AndroidAutomationRunner
  - task: PowerShell@2
    displayName: Install Automation Cert
    inputs:
      targetType: inline
      script: >
        $kvSecretBytes = [System.Convert]::FromBase64String('$(AndroidAutomationRunner)')

        $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection

        $certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)


        $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)

        $pfxPath = '$(Build.SourcesDirectory)' + "\TestCert.pfx"

        [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)


        Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My
  - task: Gradle@1
    name: Gradle1
    displayName: Assemble Release
    inputs:
      tasks: clean msal:assembleLocal
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
  - task: Gradle@2
    displayName: Run Code Coverage Task
    inputs:
      tasks: msal:localDebugMsalUnitTestCoverageReport  -Plabtest
      classFilesDirectories: $(Build.SourcesDirectory)\msal\build\reports\jacoco\localDebugMsalUnitTestCoverageReport\html\index.html
  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage report
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)\msal\build\reports\jacoco\localDebugMsalUnitTestCoverageReport\localDebugMsalUnitTestCoverageReport.xml
      reportDirectory: $(Build.SourcesDirectory)\msal\build\reports\jacoco\localDebugMsalUnitTestCoverageReport\html
      additionalCodeCoverageFiles: $(Build.SourcesDirectory)\msal\build\jacoco
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection
...
